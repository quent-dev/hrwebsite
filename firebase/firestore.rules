rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserData().role == 'admin';
    }
    
    function isManager() {
      return isAuthenticated() && getUserData().role == 'manager';
    }
    
    function isManagerOf(userId) {
      return isAuthenticated() && 
        getUserData().role == 'manager' && 
        get(/databases/$(database)/documents/users/$(userId)).data.employmentInfo.managerId == request.auth.uid;
    }

    // Time off request helper functions
    function isTimeOffOwner(timeOffData) {
      return timeOffData.userId == request.auth.uid;
    }

    function canManageTimeOff(timeOffData) {
      return isAdmin() || isManagerOf(timeOffData.userId);
    }

    function isValidTimeOffRequest() {
      let requestData = request.resource.data;
      return requestData.startDate is timestamp &&
             requestData.endDate is timestamp &&
             requestData.startDate <= requestData.endDate &&
             requestData.type in ['vacation', 'sick', 'personal', 'extra'] &&
             requestData.reason is string &&
             requestData.reason.size() >= 10;
    }

    // Users collection rules
    match /users/{userId} {
        // Add list/query permissions
      allow list: if isAuthenticated() && (
        // Managers can query users (they'll filter for their team in the application code)
        isManager() ||
        // Admins can query all users
        isAdmin()
      );
      
      // Read rules
      allow read: if isOwner(userId) || 
                  isAdmin() || 
                  isManagerOf(userId);
      
      // Create rules - only admins can create new users
      allow create: if isAdmin() ||
                   // Allow creation of own profile during signup
                   (isAuthenticated() && request.auth.uid == userId);
      
      // Update rules
      allow update: if isOwner(userId) || 
                   isAdmin() ||
                   // Managers can only update specific fields for their team members
                   (isManagerOf(userId) && 
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasOnly(['employmentInfo.position', 'employmentInfo.department']));
      
      // Delete rules - only admins can delete
      allow delete: if isAdmin();
    }

    // Time off requests collection rules
    match /timeOffRequests/{requestId} {
        // Add list/query permissions
      allow list: if isAuthenticated() && (
        // Users can query their own requests
        request.query.filters.size() == 0 ||
        (request.query.filters.size() == 1 && 
         'userId' in request.query.filters && 
         request.query.filters.userId == request.auth.uid) ||
        // Managers can query their team's requests
        isManager() ||
        // Admins can query all requests
        isAdmin()
      );
      // Read rules
      allow read: if isAuthenticated() && (
        isTimeOffOwner(resource.data) ||
        canManageTimeOff(resource.data) ||
        isAdmin()
      );

      // Create rules
      allow create: if isAuthenticated() && 
        isTimeOffOwner(request.resource.data) &&
        isValidTimeOffRequest() &&
        request.resource.data.status == 'pending' &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time;

      // Update rules
      allow update: if isAuthenticated() && (
        (isTimeOffOwner(resource.data) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) &&
         request.resource.data.status == 'cancelled') ||
        (canManageTimeOff(resource.data) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'approvedBy', 'updatedAt']) &&
         request.resource.data.status in ['approved', 'rejected'] &&
         request.resource.data.approvedBy == request.auth.uid)
      );

      // Delete rules - only admins can delete
      allow delete: if isAdmin();
    }
  }
}
